package generated.main;

import de.fhg.iais.roberta.runtime.*;
import de.fhg.iais.roberta.runtime.ev3.*;

import de.fhg.iais.roberta.mode.general.*;
import de.fhg.iais.roberta.mode.action.*;
import de.fhg.iais.roberta.mode.sensor.*;
import de.fhg.iais.roberta.mode.action.ev3.*;
import de.fhg.iais.roberta.mode.sensor.ev3.*;

import de.fhg.iais.roberta.components.*;

import java.util.LinkedHashSet;
import java.util.HashMap;
import java.util.Set;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import lejos.remote.nxt.NXTConnection;

public class lab1 {
    private static Configuration brickConfiguration;

    private Set<UsedSensor> usedSensors = new LinkedHashSet<UsedSensor>(Arrays.asList(new UsedSensor(SensorPort.S3, SensorType.COLOR, ColorSensorMode.COLOUR)));
    private Hal hal = new Hal(brickConfiguration, usedSensors);

    public static void main(String[] args) {
        try {
             brickConfiguration = new EV3Configuration.Builder()
                .setWheelDiameter(5.6)
                .setTrackWidth(18.0)
                .addActor(ActorPort.B, new Actor(ActorType.LARGE, true, DriveDirection.FOREWARD, MotorSide.RIGHT))
                .addActor(ActorPort.C, new Actor(ActorType.LARGE, true, DriveDirection.FOREWARD, MotorSide.LEFT))
                .addSensor(SensorPort.S3, new Sensor(SensorType.COLOR))
                .build();

            new lab1().run();
        } catch ( Exception e ) {
            Hal.displayExceptionWaitForKeyPress(e);
        }
    }

    float ___posy = 2;
    float ___corx = 0;
    float ___posx = 3;
    float ___cory = 0;

    public void run() throws Exception {
        hal.startLogging();
        while ( ! (___corx == ___posx) ) {
            hal.regulatedDrive(DriveDirection.FOREWARD, 100);
            if ( ( hal.getColorSensorColour(SensorPort.S3) == PickColor.WHITE ) || ( hal.getColorSensorColour(SensorPort.S3) == PickColor.BLACK ) ) {
                ___corx = ___corx + 1;
                while ( ! (( hal.getColorSensorColour(SensorPort.S3) == PickColor.WHITE ) || ( hal.getColorSensorColour(SensorPort.S3) == PickColor.BLACK )) ) {
                    hal.regulatedDrive(DriveDirection.FOREWARD, 100);
                }
                while ( ! (hal.getColorSensorColour(SensorPort.S3) == PickColor.BLUE) ) {
                    hal.regulatedDrive(DriveDirection.FOREWARD, 100);
                }
            }
        }
        hal.rotateDirectionAngle(TurnDirection.LEFT, 30, 90);
        while ( ! (___cory == ( ___posy + 1 )) ) {
            hal.regulatedDrive(DriveDirection.FOREWARD, 100);
            if ( ( hal.getColorSensorColour(SensorPort.S3) == PickColor.WHITE ) || ( hal.getColorSensorColour(SensorPort.S3) == PickColor.BLACK ) ) {
                ___cory = ___cory + 1;
                while ( ! (( hal.getColorSensorColour(SensorPort.S3) == PickColor.WHITE ) || ( hal.getColorSensorColour(SensorPort.S3) == PickColor.BLACK )) ) {
                    hal.regulatedDrive(DriveDirection.FOREWARD, 100);
                }
                while ( ! (hal.getColorSensorColour(SensorPort.S3) == PickColor.BLUE) ) {
                    hal.regulatedDrive(DriveDirection.FOREWARD, 100);
                }
            }
        }
        if ( (___posy + ___posx % 2 == 1) ) {
            hal.ledOn(BrickLedColor.GREEN, BlinkMode.ON);
        }
        if ( (___posy + ___posx % 2 == 0) ) {
            hal.ledOn(BrickLedColor.RED, BlinkMode.ON);
        }
        hal.waitFor(1500);
        if ( ___cory != 4 ) {
            while ( ! (hal.getColorSensorColour(SensorPort.S3) == PickColor.GREEN) ) {
                hal.regulatedDrive(DriveDirection.FOREWARD, 100);
            }
            hal.driveDistance(DriveDirection.BACKWARD, 100, 20);
            hal.rotateDirectionAngle(TurnDirection.RIGHT, 30, 90);
        }
        if ( ___corx != 4 ) {
            while ( ! (hal.getColorSensorColour(SensorPort.S3) == PickColor.GREEN) ) {
                hal.regulatedDrive(DriveDirection.FOREWARD, 100);
            }
            hal.driveDistance(DriveDirection.BACKWARD, 100, 20);
        }
        hal.closeResources();

    }

}